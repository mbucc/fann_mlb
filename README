Sun Mar 30 08:34:43 EDT 2014

      ******************************************************

        If you find this code useful, consider donating to
        Sean Lahman, who created and maintains this most-
        awesome dataset (it goes back to 1871).

        http://seanlahman.com/support/

      ******************************************************

A weekend hack to see how well a neural net can predict division
winners in Major League Baseball based solely on team statistics.

As my baseball-fanatic son predicted, it didn't perform very well.
His reasoning was that there are so many changes from one season
to the next that to make an accurate prediction you have to look
at things like free-agent signings, average player age, and other
such measures that are not represented in statistics that are at
the team level from prior years.

        TO RUN:

                (1) Install FANN from http://leenissen.dk/fann/wp/

                (2) cd src

                (3) make

This will train the net and generate predictions for 2011, 2012 and
2013.  It uses 31 team statistics for each of the previous three
years.  It trains a neural network on data based on ten-years of
results (2000 through 2010.  The net has 93 input nodes (31 stats/year
x three years), two hidden layers of 60 and 30 nodes and one output
node.  It's fully-connected with a bias node at each layer.  I
suspect the network overtrains.

Some possible next steps:

        (1) Get at player stats using roster data at the beginning
            of the year.  Player age has got to be a win; look at
            what happened to the Phillies and Yankees last year.

        (2) Figure out a way not to overtrain.  Review Andrew Ng's
            Coursera classes on variance versus bias, and the metrics
            he uses.  Maybe script up an exploration of model
            parameter space and let it run over night.

FILES

        src/extract_data.py

                Formats data from Teams.csv into format expected by FANN.

                Decides which metrics to use as inputs.

                Normalizes each metric to range from 0.001 to 0.999 by
                division.

        src/firstplace.c

                Trains network.

                Defines the network structure and how long to train for.

        src/oneyear.py

                Generates C code that runs prediction for each team.

                Pass in the year that you want to predict.
